createw10vm() { local VM_ORIGINAL_COMMAND=("$@"); [[ "$1" =~ ^[0-9]+$ ]] && VM_ID="$1" && shift && VM_NAME="$1" && shift || { VM_NAME="$1"; shift; create-vm-increment-vmid-helper; }; for var in AGENT ARGS BALLOON BIOS BOOTORDER BWLIMIT CDROM CLOUDINIT CORES DESCRIPTION DISK_SIZE EFIDISK_SIZE FREEZE HOOKSCRIPT HOSTPCI HUGEPAGES INSTALLER_FILENAME IOMMU ISTEMPLATE IVSHMEM KVM LOCALTIME MACHINE MACHINE_VER MAC_ADDRESS MEMORY NAMESERVER NETHW NETWORK_BRIDGE NET_STATUS NET_TAG NO_EFIDISK NO_REPACK NUMA ONBOOT OS_TYPE PRE_ENROLL_KEYS REPACK REPACK_WAFG="empty" RNG_MAX RNG_PERIOD SCSIHW SEARCHDOMAIN SMBIOS SOCKETS SPICE SPICEFOLDER SPICESTREAM SSHKEYS START STORAGE_DISK STORAGE_ISO TAGS TEMPLATE="${TEMPLATE-defaults}" TEMPLATE_FILENAME VGA VIRTIO_FILENAME WAFG WINDOWS_SETTINGS; do eval "VM_$var=\${VM_$var-}"; done; for arr in AUDIO IDE NET NVME PARALLEL PCI RNG SATA SCSI SERIAL USB; do eval "local -a VM_$arr=(\"\${VM_$arr[@]}\")"; done; create-vm-parse-argument-helper "$@"; create-vm-template-helper "$VM_TEMPLATE"; if [[ -z "$VM_NO_REPACK" ]]; then VM_INSTALLER_FILENAME="${VM_TEMPLATE_FILENAME/.iso/.unattended.latest.iso}"; VM_REPACK_COMMAND="repack-iso \"$VM_TEMPLATE_FILENAME\" \"$VM_INSTALLER_FILENAME\" $VM_REPACK ${VM_WAFG:+wafg} $VM_WAFG ${VM_WINDOWS_SETTINGS:+windowssettings \"${VM_WINDOWS_SETTINGS}\"}"; repack-iso "$VM_TEMPLATE_FILENAME" "$VM_INSTALLER_FILENAME" $VM_REPACK ${VM_WAFG:+wafg} $VM_WAFG ${VM_WINDOWS_SETTINGS:+windowssettings \"${VM_WINDOWS_SETTINGS}\"}; fi; { installer_file="${VM_INSTALLER_FILENAME:-$VM_TEMPLATE_FILENAME}"; installer_storage=$(find_iso_storage_for_file "$installer_file"); [[ -n "$installer_storage" ]] && VM_CDROM="$installer_storage:iso/$installer_file,media=cdrom"; }; [[ -n "$VM_VIRTIO_FILENAME" ]] && { virtio_storage=$(find_iso_storage_for_file "$VM_VIRTIO_FILENAME"); [[ -n "$virtio_storage" ]] && VM_IDE+=("$virtio_storage:iso/$VM_VIRTIO_FILENAME,media=cdrom"); }; CMD=$(helper-cmd-createw10vm); create-vm-array-cmd-helper; create_win10_vm_debug; echo command is "$CMD"; [[ -n "$VM_DESCRIPTION" ]] && CMD+=" --description \"$VM_DESCRIPTION\""; eval "$CMD"; }