repack-iso() { local original_args=("$@") arch="${arch:-amd64}" adddriver=("${adddriver[@]}") addfile=("${addfile[@]}") addvirtio_flag="${addvirtio_flag:-0}" autoboot_flag="${autoboot_flag:-0}" debug_flag="${debug_flag:-0}" injectbootfile=("${injectbootfile[@]}") injectbootreg=("${injectbootreg[@]}") injectinstallfile=("${injectinstallfile[@]}") injectinstallreg=("${injectinstallreg[@]}") template="${template:-}" unattend="${unattend:-}" wafg_flag="${wafg_flag:-0}" wipeworkdir_flag="${wipe_flag:-0}"; repack-iso-get-sourceiso-helper "$@"; [[ $? -ne 0 ]] && return 1; shift $([[ "$2" == *"username"* ]] && echo 2 || echo 1); repack-iso-get-destinationiso-helper "$@"; [[ $? -ne 0 ]] && return 1; shift 1; workdir="${workdir:-$(dirname "$destinationiso")/repack-iso-workdir-$(basename "$destinationiso" .iso)}"; echo "source iso path: $sourceiso destinationiso path $destinationiso workdir $workdir"; while [[ $# -gt 0 ]]; do case "$1" in workdir) shift; [[ -n "$1" ]] && workdir="$1"; shift ;; wipeworkdir|autowipe|autoboot|wafg|addvirtio|debug) eval "${1}_flag=1"; shift ;; template|unattend) shift; [[ -n "$1" ]] && eval "$1=\"\$2\""; shift ;; addfile|adddriver|injectbootfile|injectinstallfile|injectbootreg|injectinstallreg) [[ -n "$2" ]] && eval "$1+=(\"\$2\")"; shift 2 ;; *) break ;; esac; done; [[ $debug_flag -eq 1 ]] && repack-iso-internal-status; echo "ðŸ“œ Remainder Command-Line Arguments (\$@):"; for arg in "$@"; do printf '   "%s"\n' "$arg"; done; [[ $wipeworkdir_flag -eq 1 ]] && repack-iso-wipeworkdir "$workdir"; repack-iso-create-workdir "$workdir"; repack-iso-unpack-sourceiso-helper "$sourceiso" "$workdir"; [[ $addvirtio_flag -eq 1 ]] && repack-iso-prepare-virtio "$workdir/tmp/virtio"; repack-iso-copy-virtio-helper "$workdir/tmp/virtio" "$workdir/iso-master/\$WinPeDriver\$" "$isoversion" "$arch"; repack-iso-copy-helper "addfile" "$workdir/iso-master"; repack-iso-copy-helper "adddriver" "$workdir/iso-master/'$WinPeDriver$'"; repack-iso-inject-files-into-wim "injectbootfile" "$workdir/iso-master/sources/boot.wim"; repack-iso-inject-files-into-wim "injectinstallfile" "$workdir/iso-master/sources/install.wim"; repack-iso-inject-reg-into-wim "injectbootreg" "$workdir/iso-master/sources/boot.wim" "$workdir/wimmount"; repack-iso-inject-reg-into-wim "injectinstallreg" "$workdir/iso-master/sources/install.wim" "$workdir/wimmount"; local VM_REPACK_ARCH=$([[ "$arch" == "amd64" ]] || echo "$arch"); [[ -n "$VM_REPACK_ARCH" ]] && set -- "$VM_REPACK_ARCH" "$@" || set -- "$@"; [[ $wafg_flag -eq 1 ]] && compgen -v | grep -q '^VM_' && VM_REPACK_WAFG="$(printf '%s ' "$@")"; echo "Original arguments: repack-iso ${original_args[@]}" > "$workdir/iso-master/info.txt"; [[ $wafg_flag -eq 1 ]] && echo "Repack command: $VM_REPACK_COMMAND" >> "$workdir/iso-master/info.txt"; declare -F create_win10_vm_debug >/dev/null && compgen -v | grep -q '^VM_' && create_win10_vm_debug >> "$workdir/iso-master/info.txt"; [[ $wafg_flag -eq 1 ]] && echo "Running wafg-auto verbose $VM_REPACK_WAFG" >> "$workdir/iso-master/info.txt"; [[ $wafg_flag -eq 1 ]] && eval "wafg-auto dryrun verbose $VM_REPACK_WAFG" >> "$workdir/iso-master/info.txt"; [[ $wafg_flag -eq 1 ]] && unattend="$workdir/unattend/autounattend-$(date +"%Y%m%d-%H%M").xml" && echo "Running wafg-auto $VM_REPACK_WAFG > \"$unattend\"" ; eval "wafg-auto $VM_REPACK_WAFG" | tee "$unattend" -a "$workdir/iso-master/info.txt"; repack-iso-copy-unattend "$workdir/iso-master" "${unattend:-$workdir/unattend}"; echo "Running repack-iso-create-iso-with-xorriso \"$workdir/iso-master\" \"$destinationiso\""; repack-iso-create-iso-with-xorriso "$workdir/iso-master" "$destinationiso"; }